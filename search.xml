<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>iTerm2 + Oh My Zsh 配置教程</title>
      <link href="/2020/07/12/oh-my-zsh-configuration/"/>
      <url>/2020/07/12/oh-my-zsh-configuration/</url>
      
        <content type="html"><![CDATA[<p>本篇文章在 <a href="https://github.com/sirius1024/iterm2-with-oh-my-zsh/blob/master/README.md" target="_blank" rel="noopener">iTerm2 + Oh My Zsh 打造舒适终端体验</a> 上面加以补充，记录自己 iTerm2 的配置过程。</p><p>iTerm2 安装过程可以参考上面这篇教程 ，安装完就可以使用 Agnoster 的炫酷主题了。这个是我按照教程配置后的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/imgtheme-host-before.png" alt="配置后的样例"></p><p>但是总感觉还有些不太美观，于是就在上面的配置进行改动，并把自己改造的过程记录下来，</p><h2 id="修改主题配置"><a href="#修改主题配置" class="headerlink" title="修改主题配置"></a>修改主题配置</h2><h3 id="隐藏用户名和主机名"><a href="#隐藏用户名和主机名" class="headerlink" title="隐藏用户名和主机名"></a>隐藏用户名和主机名</h3><p>Agnoster 主题下，iTerm2 每行开头都会有 <code>[user]@[hostname]</code> 的提示，比较占位子。很多时候我们是在本地操作的，这点信息可以忽略，因此我们动手修改一下，把这段代码删掉。</p><p>在编辑主题的时候，我们最好拷贝一份主题，在新的主题上做修改。一方面避免 iTerm2 更新把之前修改过的主题覆盖掉，另一方面在配置错误时能参考原来的配置进行回滚：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes</span><br><span class="line"><span class="comment"># 拷贝 agnoster 主题为 my-agnoster 新主题</span></span><br><span class="line">cp agnoster.zsh-theme my-agnoster.zsh-theme</span><br></pre></td></tr></table></figure><p>编辑 <code>my-agnoster.zsh-theme</code> 文件，主题里面的 <code>build_prompt</code> 便是 zsh 每行开始的输出了，其中的 <code>prompt_context</code> 就是表示输出 <code>[user]@[hostname]</code> 字段。把这个字段注释掉就行：</p><p>主题里面的 <code>build_prompt</code> 便是终端的输出了，其中的 <code>prompt_context</code> 就是表示输出 <code>[user]@[hostname]</code> 字段。把这个字段注释掉就行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">build_prompt</span></span>() &#123;</span><br><span class="line">  RETVAL=$?</span><br><span class="line">  prompt_status</span><br><span class="line">  prompt_virtualenv</span><br><span class="line">  prompt_aws</span><br><span class="line">  <span class="comment"># prompt_context</span></span><br><span class="line">  prompt_dir</span><br><span class="line">  prompt_git</span><br><span class="line">  prompt_bzr</span><br><span class="line">  prompt_hg</span><br><span class="line">  prompt_end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编辑 <code>.zshrc</code> 文件，把 <code>ZSH_THEME</code> 字段改成我们自己的主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"my-agnoster"</span></span><br></pre></td></tr></table></figure><p>保存并退出。运行 <code>source ~/.zshrc</code> 命令更新下配置，就能生效了：</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/imgtheme.png" alt="iTerm2 修改后的默认主题"></p><h3 id="iTerm2-使用独立主题"><a href="#iTerm2-使用独立主题" class="headerlink" title="iTerm2 使用独立主题"></a>iTerm2 使用独立主题</h3><p>Agnoster 主题虽然好看，但是兼容性并不是很好。比如在 Android Studio 等 IDEA 系列 IDE 上会变形，不太好看：</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/imgandroid-studio-bug.png" alt="其他编辑器不兼容时的问题"></p><p>虽然换个主题能解决这个问题，但是 Agnoster 好看呀，有没有办法既能在 iTerm 下使用 Agnoster 主题，在 Android Studio 中又不会变形呢？</p><p>其实在 iTerm2 中有个名为 <code>TERM_PROGRAM</code> 的变量，值为 <code>iTerm.app</code>。这个变量只在 iTerm2 里打开的终端存在，其他地方打开的终端不存在这个变量。利用这个我们可以做点手脚。编辑 <code>.zshrc</code> 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用下面的代码替换之前的 ZSH_THEME="my-agnoster"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$TERM_PROGRAM</span>"</span> = <span class="string">"iTerm.app"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ZSH_THEME=<span class="string">"my-agnoster"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ZSH_THEME=<span class="string">"ys"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这段代码表明在 iTerm 中使用我们修改过的 my-agnoster 主题，在其他 app 打开的终端中使用 ys 的主题。</p><p>保存后重启下 Android Studio 的终端，可以看到有变化了：</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/imgandroid-studio-ys.png" alt="自动切换主题后，Android Studio 的终端展示正常了"></p><h2 id="强大的-alias-配置"><a href="#强大的-alias-配置" class="headerlink" title="强大的 alias 配置"></a>强大的 alias 配置</h2><p>zsh 其中一个强大的功能，就是可以通过 alias 字段自定义命令。</p><p>如果你安装了 VSCode 或者 Sublime Text，则可以通过设置 alias 在 iTerm2 中使用这两个软件可视化编辑文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vscode</span></span><br><span class="line"><span class="built_in">alias</span> code=<span class="string">"/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sublime text</span></span><br><span class="line"><span class="built_in">alias</span> subl=<span class="string">"/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"</span></span><br></pre></td></tr></table></figure><p>保存并退出，运行 <code>source ~/.zshrc</code> 命令更新下配置。后面就可以通过 <code>subl ~/.zshrc</code> 在 Sublime Text 中编辑配置文件，不用 <code>vi</code> 在终端中编辑了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客教程</title>
      <link href="/2020/03/15/hexo-site-build/"/>
      <url>/2020/03/15/hexo-site-build/</url>
      
        <content type="html"><![CDATA[<h2 id="在-GitHub-上新建自己的博客仓库"><a href="#在-GitHub-上新建自己的博客仓库" class="headerlink" title="在 GitHub 上新建自己的博客仓库"></a>在 GitHub 上新建自己的博客仓库</h2><p>打开 <a href="https://github.com/" target="_blank" rel="noopener">Github</a>，在 Repositories 下点击 New 按钮创建自己的博客仓库。这里的仓库名需要填写成 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> ，方便后面自己的站点能通过 GitHub 直接访问，而无须部署到自己的服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/img20200511201552.png" alt="Github 创建仓库页面"></p><p>这里我已经创建了自己的仓库了，所以会提示报错。</p><h2 id="安装-Hexo-博客系统"><a href="#安装-Hexo-博客系统" class="headerlink" title="安装 Hexo 博客系统"></a>安装 Hexo 博客系统</h2><p>Hexo 是发布在 npm 上的博客系统，所以我们需要先安装 nodejs。非前端用户可以直接在 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Nodejs 官网</a> 进行下载，前端用户建议使用 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a>（ Windows 则使用 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> ），方便管理 Nodejs 版本。</p><p>安装完后输入以下命令全局安装 Hexo ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过 <code>hexo init &lt;folder&gt;</code> 命令创建自己的博客了。但是我们先不用急着创建，因为 Hexo 本身的主题比较简陋，且 Hexo 每个主题本身就是一个博客网站，所以我们可以先访问 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 主题</a> 页面，选择自己一个喜欢的主题，找到这个主题的仓库，然后运行 <code>git clone &lt;博客 GitHub 地址&gt;</code> 命令，把这个仓库保存到本地。以 <a href="https://github.com/next-theme/hexo-theme-next" target="_blank" rel="noopener">Hexo Next</a> 主题为例，在这里找到这个仓库的 git 地址：</p><p><img src="https://cdn.jsdelivr.net/gh/brilliantGuo/picgo/img20200511215550.png" alt="Next 主题的仓库地址"></p><p>把仓库 clone 到本地后，进入到文件夹，在终端下依次运行下面命令，将这个仓库指向我们刚才申请的 GitHub 博客地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除原来项目的 git 信息</span></span><br><span class="line">rm -rf .git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建自己的 git 仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件记录，并保存到 git 本地仓库</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'&lt;修改记录&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改成自己的仓库地址并上传代码</span></span><br><span class="line">git remote add origin &lt;你的 GitHub 博客仓库地址&gt;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>由于 Hexo 的主题都是依靠制作者自己上传，主题的页面也是作者自己开发，所以有些博客的 GitHub 地址没有标注出来，需要自己搜索。</p><p>我使用的主题是 <a href="https://www.dusign.net/" target="_blank" rel="noopener">Super Snail</a>，比较简洁美观且文档比较齐，按照首页置顶的文章配置下即可使用。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>全部指令可以参考 <a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo - 指令</a> 一栏。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>layout 可以指定文章模板。如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。</p><h3 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>写文章时可以在本地启动一个服务器，预览博客的效果。默认链接是：<code>http://localhost:4000/</code>。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate <span class="comment"># 或者简写为 `hexo g`</span></span><br></pre></td></tr></table></figure><p>若在生成静态文件后想要立即部署，可以带上 <code>-d</code> 参数。</p><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy <span class="comment"># 或者简写为 `hexo d`</span></span><br></pre></td></tr></table></figure><p>若在部署前想要先生成静态文件，可以带上 <code>-g</code> 参数。</p><p>可以看到，<code>hexo generate -d</code> 和 <code>hexo deploy -g</code> 效果是一样的，看个人喜好使用。</p><h2 id="利用-Travis-CI-做自动化部署"><a href="#利用-Travis-CI-做自动化部署" class="headerlink" title="利用 Travis CI 做自动化部署"></a>利用 Travis CI 做自动化部署</h2><p>如果参照其它网站的 Travis 教程，可能会遇到推送到 GitHub 时，GitHub Pages &gt; Source 只能为 master 分支，不能修改为 gh-pages 的问题。这个问题的原因是 GitHub 现在对于个人博客（类似 <code>xxx.github.io</code> 这样的域名）只允许在 master 分支构建，其他分支构建 GitHub 不会再做识别。因此我们需要修改 travis 的配置文件，将源代码迁移到其他分支上（如 <code>dev</code>），将 master 作为构建分支即可。</p><p>原先的 travis.yml 配置文件如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><p>修改 <code>branches</code> 和 <code>deploy</code> 部分代码，改动如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span> <span class="comment"># 这里我们把 dev 作为开发分支，因此监听该分支构建即可</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">target_branch:</span> <span class="string">master</span> <span class="comment"># 构建后的文件分支，这里改成 master</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>问题参考链接：</p><ul><li><a href="https://stackoverflow.com/questions/39978856/unable-to-change-source-branch-in-github-pages" target="_blank" rel="noopener">Unable to change source branch in GitHub Pages</a></li><li><a href="https://axdlog.com/zh/2018/using-hugo-and-travis-ci-to-deploy-blog-to-github-pages-automatically/" target="_blank" rel="noopener">利用Travis CI和Hugo將Blog自動部署到Github Pages</a></li></ul><h2 id="接入-Gitalk-评论系统"><a href="#接入-Gitalk-评论系统" class="headerlink" title="接入 Gitalk 评论系统"></a>接入 Gitalk 评论系统</h2><p>待补充</p><h2 id="相关主题博客，供参考"><a href="#相关主题博客，供参考" class="headerlink" title="相关主题博客，供参考"></a>相关主题博客，供参考</h2><ul><li><a href="https://www.hi-linux.com/" target="_blank" rel="noopener">运维之美</a></li><li><a href="http://beantech.org/" target="_blank" rel="noopener">Bean Tech</a></li><li><a href="https://www.dusign.net/" target="_blank" rel="noopener">Super Snail</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
